<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Notes</title>
    <link>https://abskmj.github.io/notes/tags/tutorial/</link>
    <description>Recent content in Tutorial on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 abskmj</copyright>
    <lastBuildDate>Mon, 01 Jul 2019 20:15:18 +0530</lastBuildDate><atom:link href="https://abskmj.github.io/notes/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configure ES Lint with Airbnb rules for a Node.js Application</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/nodejs/es-lint/</link>
      <pubDate>Mon, 01 Jul 2019 20:15:18 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/nodejs/es-lint/</guid>
      <description>Install ES Lint modules npm install --save-dev eslint-plugin-import eslint Install Airbnb config Use the base version for Node.js applications. They also publish a version for React applications as eslint-config-airbnb.
npm install --save-dev eslint-config-airbnb-base Config File Create a .eslintrc file with following contents to Airbnb rules for the Node.js Application.
{ &amp;#34;extends&amp;#34;: &amp;#34;eslint-config-airbnb-base&amp;#34; } NPM Scripts Create few npm scripts to integrate linting into development flow.
{ &amp;#34;scripts&amp;#34;:{ &amp;#34;start&amp;#34;: &amp;#34;node .&amp;#34;, &amp;#34;lint&amp;#34;: &amp;#34;eslint --fix .</description>
    </item>
    
    <item>
      <title>Working with Git Stash</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/git/git-stash/</link>
      <pubDate>Fri, 14 Jun 2019 12:49:55 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/git/git-stash/</guid>
      <description>Git stash is a great set of commands while working on volatile porjects where you are just trying out a proof of concept or a module.
Save the local changes in Stash git stash push -m {{ commit message}} // example git stash push -m {{ new logging module }} List all the change sets in Stash git stash list Apply a change set from Stash git stash apply {{ index }} //example git stash apply 1  Not specifying an index with automatically apply first index</description>
    </item>
    
    <item>
      <title>Deploy functions on Spotinst using Serverless Framework</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/spotinst/serverless-spotinst-setup/</link>
      <pubDate>Tue, 08 Jan 2019 09:56:04 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/spotinst/serverless-spotinst-setup/</guid>
      <description>Spotinst is one of the providers which support deploying serverless functions or FaaS (Function as a Service). Serverless Framework is an NPM module which makes building serverless applications easy and open.
Isolated Workspace The steps listed below is different from the traditional steps listed on the official site. I always like to keep all the NPM modules and related files within the project directory to keep things isolated from other projects.</description>
    </item>
    
    <item>
      <title>Implement a Javascript Client for Crypto Compare API </title>
      <link>https://abskmj.github.io/notes/posts/tutorials/javascript/cligen-cryptocompare-api-client/</link>
      <pubDate>Sun, 16 Dec 2018 07:30:14 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/javascript/cligen-cryptocompare-api-client/</guid>
      <description>Crypto Compare Crypto Compare is a website and API provider which brings you all the latest streaming pricing data in the world of cryptocurrencies. Their API documentation is available here.
Javascript Client I&amp;rsquo;m writing a javascript based client for few commonly used crypto compare APIs which can be used on both nodejs and browser. I&amp;rsquo;m using an NPM module called Cligen to generate the client. The module only needs a corresponding JSON specification of the API endpoints to generate the client.</description>
    </item>
    
    <item>
      <title>Developing an Angular project on Cloud9 IDE</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/cloud9/angular-project-cloud9-ide/</link>
      <pubDate>Tue, 10 Jul 2018 12:46:13 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/cloud9/angular-project-cloud9-ide/</guid>
      <description>Update NodeJS version  All of the blank VMs on cloud9 have nvm pre installed. List all the available versions from the official site.  nvm ls-remote  Choose to install the latest version  nvm install v10.6.0  Choose to use the latest version  nvm use v10.6.0  Check the version in use  node --version Angular  Install latest Angular CLI package  npm install -g @angular/cli  Create a new project named my-project (you can use any name you need)  ng new my-project cd my-project  Change start script in package.</description>
    </item>
    
    <item>
      <title>Using a remote repository with Glitch.com</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/glitch/remote-git/</link>
      <pubDate>Mon, 18 Jun 2018 11:25:57 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/glitch/remote-git/</guid>
      <description>Glitch is a online workspace that support javascript for development with live previews.
A gitch project already has a local git repository that adds remix and review functionality. Each of the changes done to the code is automatically committed to this repository. Hence, one should NOT connect to a remote to this repository. If done, there will be unnecessary checkpoint commits in the remote repository as well when pushed.
Rather, a separate git repository can be set using the current project as working directory.</description>
    </item>
    
    <item>
      <title>Set Proxy for Maven</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/maven/maven-proxy/</link>
      <pubDate>Fri, 18 May 2018 10:54:22 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/maven/maven-proxy/</guid>
      <description>Proxy settings can be changed in {{maven_installation_folder}}/conf/settings.xml. Un-comment and change the values in proxies section of the file. Changes to this file doesn&amp;rsquo;t require maven restart.
... &amp;lt;proxies&amp;gt; &amp;lt;!-- proxy | Specification for one proxy, to be used in connecting to the network. |--&amp;gt; &amp;lt;proxy&amp;gt; &amp;lt;id&amp;gt;optional&amp;lt;/id&amp;gt; &amp;lt;active&amp;gt;true&amp;lt;/active&amp;gt; &amp;lt;protocol&amp;gt;http&amp;lt;/protocol&amp;gt; &amp;lt;username&amp;gt;&amp;lt;/username&amp;gt; &amp;lt;password&amp;gt;&amp;lt;/password&amp;gt; &amp;lt;host&amp;gt;{{proxy_host_or_ip}}&amp;lt;/host&amp;gt; &amp;lt;port&amp;gt;8080&amp;lt;/port&amp;gt; &amp;lt;nonProxyHosts&amp;gt;local.net|some.host.com&amp;lt;/nonProxyHosts&amp;gt; &amp;lt;/proxy&amp;gt; &amp;lt;/proxies&amp;gt; ... </description>
    </item>
    
    <item>
      <title>Deploy a NodeJS application using Git</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/git/deploy-nodejs-git/</link>
      <pubDate>Wed, 09 May 2018 05:09:36 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/git/deploy-nodejs-git/</guid>
      <description>Remote Repository on Deployment Server Create two folders named project.git and project.source. Create a bare git repo in project.git
git init --bare Configure project.source as working folder for source code by adding below to project.git/hooks/post-receive
#!/bin/sh git --work-tree=/{{path}}/project.source --git-dir=/{{path}}/project.git checkout -f Change file persion to 755 to make it executable.
chmod 755 project.git/hooks/post-receive Add a remote to local repo
git remote add dev git+ssh://{{user}}@{{server}}/{{path}}/project.git Above steps are generic to any kind of project as it simply transfers the code to the server.</description>
    </item>
    
    <item>
      <title>Custom Model Methods in Loopback</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/loopback/custom-model-methods/</link>
      <pubDate>Mon, 07 May 2018 08:44:22 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/loopback/custom-model-methods/</guid>
      <description>Loopback models can be extended by adding custom methods to them. A method can be:
 Model Method: the method is available on Model itself. Instance Method: the method is available on an instance of the model.  Model JS file // Model.js module.exports = function(Model) { // Model Method  Model.method = function() { ... } // Instance Method  Model.prototype.method = function() { ... } } // Model method var Model = app.</description>
    </item>
    
    <item>
      <title>Enable Destroy All API for a model in Loopback</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/loopback/enable-destroy-all-api/</link>
      <pubDate>Wed, 31 Jan 2018 19:28:48 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/loopback/enable-destroy-all-api/</guid>
      <description>Destroy All API (Model.destroyAll()) is, by default, disabled to avoid accidental bulk deletion of data. However, it might be required for developmental purposes.
Remote Method A corresponding remote method can be added to the model.js file to enable this API. This method also supports a filter to enable selective deletion.
module.exports = function (Model) { Model.remoteMethod(&amp;#39;destroyAll&amp;#39;, { isStatic: true, description: &amp;#39;Delete all matching records&amp;#39;, accessType: &amp;#39;WRITE&amp;#39;, accepts: { arg: &amp;#39;where&amp;#39;, type: &amp;#39;object&amp;#39;, description: &amp;#39;filter.</description>
    </item>
    
    <item>
      <title>Deploy Hugo Website with Surge for Free</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/deploy-hugo-surge-free/</link>
      <pubDate>Mon, 20 Nov 2017 20:28:20 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/deploy-hugo-surge-free/</guid>
      <description>Surge is static web publishing for Web Developers, right from the CLI.
 Install Surge CLI npm install -g surge Deploy with Surge Navigate to the public folder generated by Hugo CLI.
surge The site, by default, will hosted on a sub domain of surge.sh.
Deploy Changes surge --domain &amp;lt;your-site&amp;gt;.surge.sh If the same domain name is not provided, another random sub domain will be prompted by Surge CLI which has to changed to original for each deployment.</description>
    </item>
    
    <item>
      <title>Track API usage with Google Analytics</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/track-api-usage-google-analytics/</link>
      <pubDate>Wed, 15 Nov 2017 18:02:07 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/track-api-usage-google-analytics/</guid>
      <description>Google analytics is a popular tool to track your website usage. Usage of server APIs can also be tracked with this tool. Measurement Protocol APIs can be used to post the usage data to Google Analytics.
 Measurement Protocol can be used to track user interactions in any environment of internet connected devices. It allows developers to collect user-interaction in form of event or hit.
 API Hit Each invocation of an API can be tracked as a unique event.</description>
    </item>
    
  </channel>
</rss>
