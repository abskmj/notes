<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NodeJS on console.log(&#39;Hello World!&#39;)</title>
    <link>https://abskmj.github.io/notes/tags/nodejs/</link>
    <description>Recent content in NodeJS on console.log(&#39;Hello World!&#39;)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 abskmj</copyright>
    <lastBuildDate>Mon, 01 Jul 2019 20:15:18 +0530</lastBuildDate>
    
	<atom:link href="https://abskmj.github.io/notes/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Configure ES Lint with Airbnb rules for a Node.js Application</title>
      <link>https://abskmj.github.io/notes/posts/tutorials/nodejs/es-lint/</link>
      <pubDate>Mon, 01 Jul 2019 20:15:18 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/tutorials/nodejs/es-lint/</guid>
      <description>Install ES Lint modules npm install --save-dev eslint-plugin-import eslint Install Airbnb config Use the base version for Node.js applications. They also publish a version for React applications as eslint-config-airbnb.
npm install --save-dev eslint-config-airbnb-base Config File Create a .eslintrc file with following contents to Airbnb rules for the Node.js Application.
{ &amp;#34;extends&amp;#34;: &amp;#34;eslint-config-airbnb-base&amp;#34; } NPM Scripts Create few npm scripts to integrate linting into development flow.
{ &amp;#34;scripts&amp;#34;:{ &amp;#34;start&amp;#34;: &amp;#34;node .&amp;#34;, &amp;#34;lint&amp;#34;: &amp;#34;eslint --fix .</description>
    </item>
    
    <item>
      <title>NPM Module - Complex JSON to Query String</title>
      <link>https://abskmj.github.io/notes/posts/projects/npm/abskmj-query/</link>
      <pubDate>Wed, 17 Oct 2018 06:38:37 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/projects/npm/abskmj-query/</guid>
      <description>@abskmj/query It is an NPM module that converts complex JSON with arrays and nested objects into URL parameters or query string. It can also parse such query string back to JSON.
Example const query = require(&amp;#39;@abskmj/query&amp;#39;); // query to get a list of 10 people between age 17 and 66, sorted by their age  let filters = { where: { age: { $gt: 17, $lt: 66 }, }, options: { limit: 10, sort: { age: -1 } } } const queryString = query.</description>
    </item>
    
  </channel>
</rss>