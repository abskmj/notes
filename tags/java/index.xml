<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Notes</title>
    <link>https://abskmj.github.io/notes/tags/java/</link>
    <description>Recent content in Java on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 abskmj</copyright>
    <lastBuildDate>Mon, 07 Jan 2019 12:50:58 +0000</lastBuildDate><atom:link href="https://abskmj.github.io/notes/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HackerRank Contest - Project Euler - Largest product in a series</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler008/</link>
      <pubDate>Mon, 07 Jan 2019 12:50:58 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler008/</guid>
      <description>Solution import java.io.*; import java.util.*; import java.text.*; import java.math.*; import java.</description>
    </item>
    
    <item>
      <title>HackerRank Contest - Project Euler - Multiples of 3 and 5</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler001/</link>
      <pubDate>Mon, 07 Jan 2019 12:45:33 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler001/</guid>
      <description>Solution import java.io.*; import java.util.*; import java.text.*; import java.math.*; import java.</description>
    </item>
    
    <item>
      <title>HackerRank - Divisible Sum Pairs</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/implementation/divisible-sum-pairs/</link>
      <pubDate>Mon, 10 Sep 2018 08:14:46 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/implementation/divisible-sum-pairs/</guid>
      <description>Solution /* Solution to HackerRank: Divisible Sum Pairs * URL: https://www.</description>
    </item>
    
    <item>
      <title>HackerRank - The Time in Words</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/implementation/the-time-in-words/</link>
      <pubDate>Mon, 10 Sep 2018 07:16:41 +0000</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/implementation/the-time-in-words/</guid>
      <description>Solution /* Solution to HackerRank: The Time in Words * URL: https://www.</description>
    </item>
    
    <item>
      <title>HackerRank Contest - Project Euler - Large Sum</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler013/</link>
      <pubDate>Fri, 08 Dec 2017 16:21:47 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler013/</guid>
      <description>Solution  Use BigInteger to calculate the sum and print first 10 characters by converting to string.</description>
    </item>
    
    <item>
      <title>HackerRank Contest - Project Euler - Power Digit Sum</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler016/</link>
      <pubDate>Fri, 08 Dec 2017 16:03:31 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler016/</guid>
      <description>Solution  2 to the power 1000 will be a huge number hence consider using BigInteger.</description>
    </item>
    
    <item>
      <title>HackerEarth - Binary Tree</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerearth/data-structures/trees/binary-and-nary-trees/tutorial/</link>
      <pubDate>Mon, 20 Nov 2017 20:04:29 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerearth/data-structures/trees/binary-and-nary-trees/tutorial/</guid>
      <description>Solution  Diameter of a binary tree is maximum of diameter of current node, its left and right child.</description>
    </item>
    
    <item>
      <title>HackerRank - Goodland Electricity</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/greedy/pylons/</link>
      <pubDate>Sat, 18 Nov 2017 20:30:35 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/greedy/pylons/</guid>
      <description>Solution  Iterate through each city and check if it is already under range of previous tower.</description>
    </item>
    
    <item>
      <title>HackerRank - Max Min</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/greedy/angry-children/</link>
      <pubDate>Sat, 18 Nov 2017 17:20:41 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/greedy/angry-children/</guid>
      <description>Solution  Sort the array of numbers Find the minimum difference between ith and (i+K-1)th element in each iteration.</description>
    </item>
    
    <item>
      <title>HackerRank - Maximum Perimeter Triangle</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/greedy/maximum-perimeter-triangle/</link>
      <pubDate>Sat, 18 Nov 2017 17:01:27 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/greedy/maximum-perimeter-triangle/</guid>
      <description>Solution  Iterate the sides in descending order Check if sides make a triangle by checking if sum of two sides is greater than third side .</description>
    </item>
    
    <item>
      <title>HackerEarth - Mirror Image</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerearth/data-structures/trees/binary-and-nary-trees/mirror-image-2/</link>
      <pubDate>Sat, 18 Nov 2017 11:36:52 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerearth/data-structures/trees/binary-and-nary-trees/mirror-image-2/</guid>
      <description>Solution  Parse input and build the tree by maintaining an index HashMap.</description>
    </item>
    
    <item>
      <title>HackerRank - Largest Permutation</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/greedy/largest-permutation/</link>
      <pubDate>Thu, 09 Nov 2017 22:02:51 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/greedy/largest-permutation/</guid>
      <description>Solution #1  Keep indexes of all numbers in a HashMap.</description>
    </item>
    
    <item>
      <title>HackerRank - Hackerland Radio Transmitters</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/search/hackerland-radio-transmitters/</link>
      <pubDate>Wed, 08 Nov 2017 21:50:01 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/search/hackerland-radio-transmitters/</guid>
      <description>Solution  Iterate through each house in a sorted order. Check if current house is in range of last transmitter.</description>
    </item>
    
    <item>
      <title>HackerRank - Minimum Loss</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/search/minimum-loss/</link>
      <pubDate>Wed, 08 Nov 2017 21:06:31 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/search/minimum-loss/</guid>
      <description>Solution #1  Keep prices and corresponding index in a HashMap.</description>
    </item>
    
    <item>
      <title>HackerRank Contest - HourRank 24 - Mutual Indivisibility</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/hourrank-24/mutual-indivisibility/</link>
      <pubDate>Wed, 08 Nov 2017 20:54:03 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/hourrank-24/mutual-indivisibility/</guid>
      <description>Solution  Start iterating numbers from b to a because combination of larger numbers are more likely to be indivisible.</description>
    </item>
    
    <item>
      <title>HackerRank Contest - Project Euler - 10001st Prime</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler007/</link>
      <pubDate>Tue, 07 Nov 2017 07:41:06 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler007/</guid>
      <description>Solution  Iterate from 2 to the given number. Consider odd numbers only except 2.</description>
    </item>
    
    <item>
      <title>HackerRank Contest - Project Euler - Sum Square Difference</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler006/</link>
      <pubDate>Tue, 07 Nov 2017 07:19:29 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler006/</guid>
      <description>Solution  Iterate from 1 to given number. Add each iteration to sum and square of it to another sum.</description>
    </item>
    
    <item>
      <title>HackerRank Contest - Project Euler - Largest Palindrome</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler004/</link>
      <pubDate>Mon, 06 Nov 2017 22:01:58 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler004/</guid>
      <description>Solution  Iterate from the given number to zero. Check if current iteration is a palindrome by using reverse() of StringBuilder class.</description>
    </item>
    
    <item>
      <title>HackerRank Contest - Project Euler - Largest Prime Factor</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler003/</link>
      <pubDate>Mon, 06 Nov 2017 20:56:26 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler003/</guid>
      <description>Solution  Find all the factors of the given number by iterating from 1 to square root of the number.</description>
    </item>
    
    <item>
      <title>HackerRank Contest - Project Euler - Even Fibonacci Numbers</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler002/</link>
      <pubDate>Sat, 04 Nov 2017 20:36:33 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/projecteuler/euler002/</guid>
      <description>Solution #1 Test cases 2,3 timed out for below solution.</description>
    </item>
    
    <item>
      <title>HackerRank Contest - HourRank 24 - Strong Password</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/hourrank-24/strong-password/</link>
      <pubDate>Sat, 04 Nov 2017 20:14:08 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/contests/hourrank-24/strong-password/</guid>
      <description>Solution  Count characters of each group in given string. Groups: digit, lower-case, upper-case and special characters Add one of each group to the string if not already present i.</description>
    </item>
    
    <item>
      <title>HackerRank - Journey to the Moon</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/graph-theory/journey-to-the-moon/</link>
      <pubDate>Sun, 29 Oct 2017 23:20:35 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/graph-theory/journey-to-the-moon/</guid>
      <description>Solution  Graph is used to connect all astronauts to a country.</description>
    </item>
    
    <item>
      <title>HackerRank - Roads and Libraries</title>
      <link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/graph-theory/torque-and-development/</link>
      <pubDate>Thu, 26 Oct 2017 11:05:14 +0530</pubDate>
      
      <guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/graph-theory/torque-and-development/</guid>
      <description>Minimum Cost  If the number of roads is zero or cost of building a road is more than cost of building a library, then building libraries in each of the cities will result in minimum cost.</description>
    </item>
    
  </channel>
</rss>
