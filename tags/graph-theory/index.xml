<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graph Theory on Notes</title><link>https://abskmj.github.io/notes/tags/graph-theory/</link><description>Recent content in Graph Theory on Notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&amp;copy; 2017 abskmj</copyright><lastBuildDate>Sun, 29 Oct 2017 23:20:35 +0530</lastBuildDate><atom:link href="https://abskmj.github.io/notes/tags/graph-theory/index.xml" rel="self" type="application/rss+xml"/><item><title>HackerRank - Journey to the Moon</title><link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/graph-theory/journey-to-the-moon/</link><pubDate>Sun, 29 Oct 2017 23:20:35 +0530</pubDate><guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/graph-theory/journey-to-the-moon/</guid><description>Solution Graph is used to connect all astronauts to a country.</description><content>&lt;h1 id="solution">Solution&lt;/h1>
&lt;ul>
&lt;li>Graph is used to connect all astronauts to a country.&lt;/li>
&lt;li>Each cluster of graph represents a country.&lt;/li>
&lt;li>Each cluster is traversed to find the count of astronauts.&lt;/li>
&lt;li>Number of possible combinations are calculated based on sizes of these countries.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">/* Solution to HackerRank: Journey to the Moon
&lt;/span>&lt;span style="color:#75715e"> * URL: https://www.hackerrank.com/challenges/journey-to-the-moon
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> java.io.*&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> java.util.*&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Scanner in &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Scanner&lt;span style="color:#f92672">(&lt;/span>System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">in&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> N &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
Graph graph &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Graph&lt;span style="color:#f92672">(&lt;/span>N&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> P &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> P&lt;span style="color:#f92672">;&lt;/span> i&lt;span style="color:#f92672">++){&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> source &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> destination &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
graph&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">addEdge&lt;/span>&lt;span style="color:#f92672">(&lt;/span>source&lt;span style="color:#f92672">,&lt;/span>destination&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> visited &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span>&lt;span style="color:#f92672">[&lt;/span>N&lt;span style="color:#f92672">];&lt;/span>
List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> countries &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;();&lt;/span>
&lt;span style="color:#66d9ef">long&lt;/span> combinations &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#75715e">// store size of each country by traversing each cluster
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> N&lt;span style="color:#f92672">;&lt;/span> i&lt;span style="color:#f92672">++){&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>visited&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]){&lt;/span>
countries&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>graph&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">dfs&lt;/span>&lt;span style="color:#f92672">(&lt;/span>i&lt;span style="color:#f92672">,&lt;/span> visited&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">// calculating combinations with double caused test case #11 to timeout
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">/*for(int i = 0; i &amp;lt; clusters.size()-1; i++){
&lt;/span>&lt;span style="color:#75715e"> for (int j = i + 1; j &amp;lt; clusters.size(); j++){
&lt;/span>&lt;span style="color:#75715e"> combinations += clusters.get(i) * clusters.get(j);
&lt;/span>&lt;span style="color:#75715e"> }
&lt;/span>&lt;span style="color:#75715e"> }*/&lt;/span>
&lt;span style="color:#75715e">/* Let size of each country be A, B, C, D ...
&lt;/span>&lt;span style="color:#75715e"> * Combinations: AB + AC + AD + BC + BD + CD + ...
&lt;/span>&lt;span style="color:#75715e"> * =&amp;gt; AB + (A+B)C + (A+B+C)D
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> sum &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> country &lt;span style="color:#f92672">:&lt;/span> countries&lt;span style="color:#f92672">){&lt;/span>
combinations &lt;span style="color:#f92672">+=&lt;/span> sum&lt;span style="color:#f92672">*&lt;/span>country&lt;span style="color:#f92672">;&lt;/span>
sum &lt;span style="color:#f92672">+=&lt;/span> country&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>combinations&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Graph&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;[]&lt;/span> vertices&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Graph&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> count&lt;span style="color:#f92672">){&lt;/span>
vertices &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">[&lt;/span>count&lt;span style="color:#f92672">];&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> count&lt;span style="color:#f92672">;&lt;/span> i&lt;span style="color:#f92672">++){&lt;/span>
vertices&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">addEdge&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> source&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> destination&lt;span style="color:#f92672">){&lt;/span>
vertices&lt;span style="color:#f92672">[&lt;/span>source&lt;span style="color:#f92672">].&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>destination&lt;span style="color:#f92672">);&lt;/span>
vertices&lt;span style="color:#f92672">[&lt;/span>destination&lt;span style="color:#f92672">].&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>source&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">// modified DFS to return number of vertices traversed
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">dfs&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> source&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> visited&lt;span style="color:#f92672">){&lt;/span>
visited&lt;span style="color:#f92672">[&lt;/span>source&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> count &lt;span style="color:#f92672">=&lt;/span> 1&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Integer vertex&lt;span style="color:#f92672">:&lt;/span> vertices&lt;span style="color:#f92672">[&lt;/span>source&lt;span style="color:#f92672">]){&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>visited&lt;span style="color:#f92672">[&lt;/span>vertex&lt;span style="color:#f92672">]){&lt;/span>
count &lt;span style="color:#f92672">+=&lt;/span> dfs&lt;span style="color:#f92672">(&lt;/span>vertex&lt;span style="color:#f92672">,&lt;/span> visited&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> count&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>HackerRank - Roads and Libraries</title><link>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/graph-theory/torque-and-development/</link><pubDate>Thu, 26 Oct 2017 11:05:14 +0530</pubDate><guid>https://abskmj.github.io/notes/posts/solutions/hackerrank/algorithms/graph-theory/torque-and-development/</guid><description>Minimum Cost If the number of roads is zero or cost of building a road is more than cost of building a library, then building libraries in each of the cities will result in minimum cost.</description><content>&lt;h1 id="minimum-cost">Minimum Cost&lt;/h1>
&lt;ul>
&lt;li>If the number of roads is zero or cost of building a road is more than cost of building a library, then building libraries in each of the cities will result in minimum cost.&lt;/li>
&lt;li>If the cost of building a library is less than cost of building a road, then building a single library and building roads to connected cities will result in minimum cost.&lt;/li>
&lt;/ul>
&lt;h1 id="clusters">Clusters&lt;/h1>
&lt;p>There can be few set of cities that are not connected to each other and are clusters. Minimum cost is summation of minimum cost for all clusters.&lt;/p>
&lt;h1 id="solution">Solution&lt;/h1>
&lt;ul>
&lt;li>Each city is a vertex and each road is an undirected edge in a graph.&lt;/li>
&lt;li>DFS (Depth First Search) algorithm is used to traverse all cities in each cluster.&lt;/li>
&lt;li>Number of roads in each cluster is one less than the number of cities traversed.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">/* Solution to HackerRank: Roads and Libraries
&lt;/span>&lt;span style="color:#75715e"> * URL: https://www.hackerrank.com/challenges/torque-and-development
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> java.io.*&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> java.util.*&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> java.text.*&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> java.math.*&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> java.util.regex.*&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Solution&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Scanner in &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Scanner&lt;span style="color:#f92672">(&lt;/span>System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">in&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> q &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> a0 &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> a0 &lt;span style="color:#f92672">&amp;lt;&lt;/span> q&lt;span style="color:#f92672">;&lt;/span> a0&lt;span style="color:#f92672">++){&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> r &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">long&lt;/span> cl &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextLong&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">long&lt;/span> cr &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextLong&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
Graph graph &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Graph&lt;span style="color:#f92672">(&lt;/span>c&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> a1 &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> a1 &lt;span style="color:#f92672">&amp;lt;&lt;/span> r&lt;span style="color:#f92672">;&lt;/span> a1&lt;span style="color:#f92672">++){&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> city_1 &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> city_2 &lt;span style="color:#f92672">=&lt;/span> in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">// start index from 0
&lt;/span>&lt;span style="color:#75715e">&lt;/span> graph&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">addEdge&lt;/span>&lt;span style="color:#f92672">(&lt;/span>city_1&lt;span style="color:#f92672">-&lt;/span>1&lt;span style="color:#f92672">,&lt;/span>city_2&lt;span style="color:#f92672">-&lt;/span>1&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">// if number of roads is 0 or cost of building a library is less than or equal to cost of building a road
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// minimum cost will be building libraries in all the cities
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>cl &lt;span style="color:#f92672">&amp;lt;=&lt;/span> cr &lt;span style="color:#f92672">||&lt;/span> r &lt;span style="color:#f92672">==&lt;/span> 0&lt;span style="color:#f92672">){&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>cl&lt;span style="color:#f92672">*&lt;/span>c&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">else&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> visited &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span>&lt;span style="color:#f92672">[&lt;/span>c&lt;span style="color:#f92672">];&lt;/span>
&lt;span style="color:#66d9ef">long&lt;/span> cost &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#75715e">// there may be more than one unconnected cluster
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> c&lt;span style="color:#f92672">;&lt;/span> i&lt;span style="color:#f92672">++){&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>visited&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]){&lt;/span>
&lt;span style="color:#75715e">//System.out.print(&amp;#34;Cluster: &amp;#34;);
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// number of roads will be one less than the vertices traversed during DFS
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> roads &lt;span style="color:#f92672">=&lt;/span> graph&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">dfs&lt;/span>&lt;span style="color:#f92672">(&lt;/span>i&lt;span style="color:#f92672">,&lt;/span> visited&lt;span style="color:#f92672">)-&lt;/span>1&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#75715e">//System.out.println(&amp;#34;&amp;#34;);
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//System.out.println(&amp;#34;Roads: &amp;#34;+roads);
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// cost will be building all the roads in the cluster and a library
&lt;/span>&lt;span style="color:#75715e">&lt;/span> cost &lt;span style="color:#f92672">+=&lt;/span> roads&lt;span style="color:#f92672">*&lt;/span>cr&lt;span style="color:#f92672">;&lt;/span>
cost &lt;span style="color:#f92672">+=&lt;/span> cl&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>cost&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Graph&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;[]&lt;/span> vertices&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Graph&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> count&lt;span style="color:#f92672">){&lt;/span>
vertices &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">[&lt;/span>count&lt;span style="color:#f92672">];&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> count&lt;span style="color:#f92672">;&lt;/span> i&lt;span style="color:#f92672">++){&lt;/span>
vertices&lt;span style="color:#f92672">[&lt;/span>i&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">addEdge&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> source&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> destination&lt;span style="color:#f92672">){&lt;/span>
vertices&lt;span style="color:#f92672">[&lt;/span>source&lt;span style="color:#f92672">].&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>destination&lt;span style="color:#f92672">);&lt;/span>
vertices&lt;span style="color:#f92672">[&lt;/span>destination&lt;span style="color:#f92672">].&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>source&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">dfs&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> source&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> visited&lt;span style="color:#f92672">){&lt;/span>
visited&lt;span style="color:#f92672">[&lt;/span>source&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> roads &lt;span style="color:#f92672">=&lt;/span> 1&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#75715e">//System.out.print(source+&amp;#34; &amp;#34;);
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Integer vertex&lt;span style="color:#f92672">:&lt;/span> vertices&lt;span style="color:#f92672">[&lt;/span>source&lt;span style="color:#f92672">]){&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>visited&lt;span style="color:#f92672">[&lt;/span>vertex&lt;span style="color:#f92672">]){&lt;/span>
roads &lt;span style="color:#f92672">+=&lt;/span> dfs&lt;span style="color:#f92672">(&lt;/span>vertex&lt;span style="color:#f92672">,&lt;/span> visited&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> roads&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></content></item></channel></rss>